# Source: https://github.com/arduino/tooling-project-assets/blob/main/workflow-templates/assets/release-go-task/DistTasks.yml
version: "3"

# This taskfile is ideally meant to be project agnostic and could be dropped in
# on other Go projects with minimal or no changes.
#
# To use it simply add the following lines to your main taskfile:
#   includes:
#     dist: ./DistTasks.yml
#
# The following variables must be declared in the including taskfile for the
# build process to work correctly:
# * DIST_DIR: the folder that will contain the final binaries and packages
# * PROJECT_NAME: the name of the project, used in package name
# * VERSION: the version of the project, used in package name and checksum file
# * LD_FLAGS: flags used at build time
#
# The project MUST contain a LICENSE.txt file in the root folder or packaging will fail.

vars:
  CONTAINER: "docker.elastic.co/beats-dev/golang-crossbuild"
  GO_VERSION: "1.20.5"

tasks:
  Windows_64bit:
    desc: Builds Windows 64 bit binaries
    dir: "{{.DIST_DIR}}"
    cmds:
      - |
        mkdir {{.PLATFORM_DIR}}
        cp ../LICENSE.txt {{.PLATFORM_DIR}}/
        docker run -v `pwd`/..:/home/build -w /home/build \
        -e CGO_ENABLED=0 \
        {{.CONTAINER}}:{{.CONTAINER_TAG}} \
        --build-cmd "{{.BUILD_COMMAND}}" \
        -p "{{.BUILD_PLATFORM}}"

        zip {{.PACKAGE_NAME}} {{.PLATFORM_DIR}}/{{.PROJECT_NAME}}.exe {{.PLATFORM_DIR}}/LICENSE.txt

    vars:
      PLATFORM_DIR: "{{.PROJECT_NAME}}_windows_amd64"
      BUILD_COMMAND: >
        go build -o {{.DIST_DIR}}/{{.PLATFORM_DIR}}/{{.PROJECT_NAME}}.exe {{.LDFLAGS}}
      BUILD_PLATFORM: "windows/amd64"
      CONTAINER_TAG: "{{.GO_VERSION}}-main"
      PACKAGE_PLATFORM: "Windows_64bit"
      PACKAGE_NAME: "{{.PROJECT_NAME}}_{{.VERSION}}_{{.PACKAGE_PLATFORM}}.zip"

  Linux_64bit:
    desc: Builds Linux 64 bit binaries
    dir: "{{.DIST_DIR}}"
    cmds:
      - |
        mkdir {{.PLATFORM_DIR}}
        cp ../LICENSE.txt {{.PLATFORM_DIR}}/
        docker run -v `pwd`/..:/home/build -w /home/build \
        -e CGO_ENABLED=0 \
        {{.CONTAINER}}:{{.CONTAINER_TAG}} \
        --build-cmd "{{.BUILD_COMMAND}}" \
        -p "{{.BUILD_PLATFORM}}"

        tar cz {{.PLATFORM_DIR}} -f {{.PACKAGE_NAME}}

    vars:
      PLATFORM_DIR: "{{.PROJECT_NAME}}_linux_amd64"
      BUILD_COMMAND: >
        go build -o {{.DIST_DIR}}/{{.PLATFORM_DIR}}/{{.PROJECT_NAME}} {{.LDFLAGS}}
      BUILD_PLATFORM: "linux/amd64"
      CONTAINER_TAG: "{{.GO_VERSION}}-main"
      PACKAGE_PLATFORM: "Linux_64bit"
      PACKAGE_NAME: "{{.PROJECT_NAME}}_{{.VERSION}}_{{.PACKAGE_PLATFORM}}.tar.gz"

  macOS_64bit:
    desc: Builds Mac OS X 64 bit binaries
    dir: "{{.DIST_DIR}}"
    cmds:
      # "git config safe.directory" is required until this is fixed https://github.com/elastic/golang-crossbuild/issues/232
      - |
        mkdir {{.PLATFORM_DIR}}
        cp ../LICENSE.txt {{.PLATFORM_DIR}}/
        docker run -v `pwd`/..:/home/build -w /home/build \
        -e CGO_ENABLED=0 \
        {{.CONTAINER}}:{{.CONTAINER_TAG}} \
        --build-cmd "git config --global --add safe.directory /home/build && {{.BUILD_COMMAND}}" \
        -p "{{.BUILD_PLATFORM}}"

        tar cz {{.PLATFORM_DIR}} -f {{.PACKAGE_NAME}}

    vars:
      PLATFORM_DIR: "{{.PROJECT_NAME}}_osx_darwin_amd64"
      BUILD_COMMAND: >
        go build -o {{.DIST_DIR}}/{{.PLATFORM_DIR}}/{{.PROJECT_NAME}} {{.LDFLAGS}}
      BUILD_PLATFORM: "darwin/amd64"
      CONTAINER_TAG: "{{.GO_VERSION}}-darwin-debian10"
      PACKAGE_PLATFORM: "macOS_64bit"
      PACKAGE_NAME: "{{.PROJECT_NAME}}_{{.VERSION}}_{{.PACKAGE_PLATFORM}}.tar.gz"

  generate-index-data:
    desc: Generates json for platform index
    vars:
      WINDOWS64_SHA:
        sh: sha256sum {{ .DIST_DIR }}/{{ .PROJECT_NAME }}_{{ .VERSION }}_Windows_64bit.zip | cut -f1 -d " "
      LINUX64_SHA:
        sh: sha256sum {{ .DIST_DIR }}/{{ .PROJECT_NAME }}_{{ .VERSION }}_Linux_64bit.tar.gz | cut -f1 -d " "
      OSX64_SHA:
        sh: sha256sum {{ .DIST_DIR }}/{{ .PROJECT_NAME }}_{{ .VERSION }}_macOS_64bit.tar.gz | cut -f1 -d " "
      WINDOWS64_SIZE:
        sh: ls -la {{ .DIST_DIR }}/{{ .PROJECT_NAME }}_{{ .VERSION }}_Windows_64bit.zip | cut -f5 -d " "
      LINUX64_SIZE:
        sh: ls -la {{ .DIST_DIR }}/{{ .PROJECT_NAME }}_{{ .VERSION }}_Linux_64bit.tar.gz | cut -f5 -d " "
      OSX64_SIZE:
        sh: ls -la {{ .DIST_DIR }}/{{ .PROJECT_NAME }}_{{ .VERSION }}_macOS_64bit.tar.gz | cut -f5 -d " "
    cmds:
      - |
        cat extras/package_index.json.template |
        sed "s/%%VERSION%%/{{ .VERSION }}/" |
        sed "s/%%FILENAME%%/{{ .PROJECT_NAME }}/" |
        sed "s/%%LINUX64_SHA%%/{{ .LINUX64_SHA }}/" |
        sed "s/%%LINUX64_SIZE%%/{{ .LINUX64_SIZE }}/" |
        sed "s/%%OSX64_SHA%%/{{ .OSX64_SHA }}/" |
        sed "s/%%OSX64_SIZE%%/{{ .OSX64_SIZE }}/" |
        sed "s/%%WINDOWS64_SHA%%/{{ .WINDOWS64_SHA }}/" |
        sed "s/%%WINDOWS64_SIZE%%/{{ .WINDOWS64_SIZE }}/" \
        > {{ .DIST_DIR }}/package_index.json
